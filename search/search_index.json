{
    "docs": [
        {
            "location": "/",
            "text": "Subble\n\n\nA broken music player\n\n\n\n\nOverview\n\n\nSubble is developed with the aim to be a total modular music manager/player, this is accomplished by having a core library with a list of base interfaces that will be implemented by external plugins. This means that in its core Subble can only load and manage plugins.\n\n\nInstall\n\n\nTODO...\n\n\nBuild\n\n\ngit clone --recurse-submodules https://github.com/Subble/Subble.git\n\n\n\n\nwindows: \nbuild.ps1\n\n\nlinux: \nbuild.sh\n\n\n\n\ndotnet Build/Subble.dll",
            "title": "Home"
        },
        {
            "location": "/#subble",
            "text": "A broken music player",
            "title": "Subble"
        },
        {
            "location": "/#overview",
            "text": "Subble is developed with the aim to be a total modular music manager/player, this is accomplished by having a core library with a list of base interfaces that will be implemented by external plugins. This means that in its core Subble can only load and manage plugins.",
            "title": "Overview"
        },
        {
            "location": "/#install",
            "text": "TODO...",
            "title": "Install"
        },
        {
            "location": "/#build",
            "text": "git clone --recurse-submodules https://github.com/Subble/Subble.git   windows:  build.ps1  linux:  build.sh   dotnet Build/Subble.dll",
            "title": "Build"
        },
        {
            "location": "/plugins/",
            "text": "Plugins\n\n\n\n\nInstallation\n\n\nTo install a Plugin just copy it folder to the \nPlugins\n folder in the Subble directory.\nEach plugin should have is own folder and the entry plugin file should be named as \nPlugin.[GUID].dll\n.\n\n\nSo the directory structure should look like:\n\n\nSubble\n  Plugins\n    MyPlugin\n        Plugin.d204b7a4-a73b-4d2b-8ca2-4ba45a888c59.dll\n    OtherPlugin\n        Plugin.59025e0f-438d-4334-a0f6-ff9c68794439.dll\n\n\n\nPlugin types\n\n\nWe can divide the plugins in 2 main groups:\n\n\n\n\n\n\nFunction Plugins:\n    This are the plugins that extend functionality of the core application\n\n\n\n\n\n\nService Plugins:\n    This are the plugins that create and register new services to be used by other plugins\n\n\n\n\n\n\nFunction plugins usually depends on other services plugins, its the user responsibility to make sure that all required dependencies are present\n\n\nPlugin development\n\n\nPlugins are developed using \n.NET Core\n and referencing the \nSubble.Core.dll\n library present in the Subble directory, check the \nquick-start guide\n to see a basic example of a working plugin\n\n\nThe development can be done in any OS supported by .net core, \nclick here\n to see a list of supported OS",
            "title": "Overview"
        },
        {
            "location": "/plugins/#plugins",
            "text": "",
            "title": "Plugins"
        },
        {
            "location": "/plugins/#installation",
            "text": "To install a Plugin just copy it folder to the  Plugins  folder in the Subble directory.\nEach plugin should have is own folder and the entry plugin file should be named as  Plugin.[GUID].dll .  So the directory structure should look like:  Subble\n  Plugins\n    MyPlugin\n        Plugin.d204b7a4-a73b-4d2b-8ca2-4ba45a888c59.dll\n    OtherPlugin\n        Plugin.59025e0f-438d-4334-a0f6-ff9c68794439.dll",
            "title": "Installation"
        },
        {
            "location": "/plugins/#plugin-types",
            "text": "We can divide the plugins in 2 main groups:    Function Plugins:\n    This are the plugins that extend functionality of the core application    Service Plugins:\n    This are the plugins that create and register new services to be used by other plugins    Function plugins usually depends on other services plugins, its the user responsibility to make sure that all required dependencies are present",
            "title": "Plugin types"
        },
        {
            "location": "/plugins/#plugin-development",
            "text": "Plugins are developed using  .NET Core  and referencing the  Subble.Core.dll  library present in the Subble directory, check the  quick-start guide  to see a basic example of a working plugin  The development can be done in any OS supported by .net core,  click here  to see a list of supported OS",
            "title": "Plugin development"
        },
        {
            "location": "/plugins/quick-start/",
            "text": "todo...",
            "title": "Quick-Start"
        },
        {
            "location": "/plugins/events/",
            "text": "Overview\n\n\nSubble communicates with plugins and external applications using a event based system. Every action emits an event that can be consumed by third parties.\n\n\nAn event has the following properties:\n\n\n\n\nID: a unique ID generated by the host\n\n\nType: event type\n\n\nSource: the source name that generated the event\n\n\nTimestamp: Date and time of when the event was emitted\n\n\nPayload: Extra data associated to event\n\n\n\n\nConsuming Events\n\n\nA plugin can consume any event by subscribing to it from the \nISubbleHost\n\n\nIn the following example we create a simple plugin that every time a log entry is created, increments a variable:\n\n\npublic class LogCountPlugin : ISubblePlugin\n{\n    public IPluginInfo Info => new MyPluginInfo();\n    public SemVersion Version => (0, 1, 0);\n    public long LoadPriority => 99;\n    public IEnumerable<Dependency> Dependencies\n        => new List<Dependency>();\n\n    public bool Initialize(ISubbleHost host)\n    {\n        host.Events\n            .Where(e => e.Type == EventsType.Core.LOG)\n            .Subscribe(OnNewLogEntry);\n    }\n\n    private static int _count = 0;\n    private static void OnNewLogEntry(ISubbleEvent e)\n    {\n        _count++;\n    }\n}\n\n\n\n\nProducing Events\n\n\nA Plugin can also create events, by calling the method \nEmitEvent\n from \nISubbleHost\n\n\nContinuing the last example we can modify it to emit a event when the count reach 10:\n\n\npublic class LogCountPlugin : ISubblePlugin\n{\n    public IPluginInfo Info => new MyPluginInfo();\n    public SemVersion Version => (0, 1, 0);\n    public long LoadPriority => 99;\n    public IEnumerable<Dependency> Dependencies\n        => new List<Dependency>();\n\n    public bool Initialize(ISubbleHost host)\n    {\n        _host = host;\n\n        host.Events\n            .Where(e => e.Type == EventsType.Core.LOG)\n            .Subscribe(OnNewLogEntry);\n    }\n\n    private ISubbleHost _host;\n    private int _count = 0;\n    private void OnNewLogEntry(ISubbleEvent e)\n    {\n        _count++;\n        if(_count == 10)\n        {\n            _host.EmitEvent(\"ON_LOG_MILESTONE\", \"LogCountPlugin\", \"Log count has reached 10!\")\n        }\n    }\n}",
            "title": "Events"
        },
        {
            "location": "/plugins/events/#overview",
            "text": "Subble communicates with plugins and external applications using a event based system. Every action emits an event that can be consumed by third parties.  An event has the following properties:   ID: a unique ID generated by the host  Type: event type  Source: the source name that generated the event  Timestamp: Date and time of when the event was emitted  Payload: Extra data associated to event",
            "title": "Overview"
        },
        {
            "location": "/plugins/events/#consuming-events",
            "text": "A plugin can consume any event by subscribing to it from the  ISubbleHost  In the following example we create a simple plugin that every time a log entry is created, increments a variable:  public class LogCountPlugin : ISubblePlugin\n{\n    public IPluginInfo Info => new MyPluginInfo();\n    public SemVersion Version => (0, 1, 0);\n    public long LoadPriority => 99;\n    public IEnumerable<Dependency> Dependencies\n        => new List<Dependency>();\n\n    public bool Initialize(ISubbleHost host)\n    {\n        host.Events\n            .Where(e => e.Type == EventsType.Core.LOG)\n            .Subscribe(OnNewLogEntry);\n    }\n\n    private static int _count = 0;\n    private static void OnNewLogEntry(ISubbleEvent e)\n    {\n        _count++;\n    }\n}",
            "title": "Consuming Events"
        },
        {
            "location": "/plugins/events/#producing-events",
            "text": "A Plugin can also create events, by calling the method  EmitEvent  from  ISubbleHost  Continuing the last example we can modify it to emit a event when the count reach 10:  public class LogCountPlugin : ISubblePlugin\n{\n    public IPluginInfo Info => new MyPluginInfo();\n    public SemVersion Version => (0, 1, 0);\n    public long LoadPriority => 99;\n    public IEnumerable<Dependency> Dependencies\n        => new List<Dependency>();\n\n    public bool Initialize(ISubbleHost host)\n    {\n        _host = host;\n\n        host.Events\n            .Where(e => e.Type == EventsType.Core.LOG)\n            .Subscribe(OnNewLogEntry);\n    }\n\n    private ISubbleHost _host;\n    private int _count = 0;\n    private void OnNewLogEntry(ISubbleEvent e)\n    {\n        _count++;\n        if(_count == 10)\n        {\n            _host.EmitEvent(\"ON_LOG_MILESTONE\", \"LogCountPlugin\", \"Log count has reached 10!\")\n        }\n    }\n}",
            "title": "Producing Events"
        },
        {
            "location": "/network/",
            "text": "Network\n\n\n\n\nSubble contains a network protocol specification that allow communication with external applications. For security reasons this functionality must be explicitly activated in order to accept connections.\nIt's possible to consult the \ncurrent specification\n, it is based on the TCP/IP protocol, so any language can implement it without great difficulties.\n\n\nRight now there are no implementation of this protocol in other languages, but a Javascript implementation over websockets is planned.",
            "title": "Overview"
        },
        {
            "location": "/network/#network",
            "text": "Subble contains a network protocol specification that allow communication with external applications. For security reasons this functionality must be explicitly activated in order to accept connections.\nIt's possible to consult the  current specification , it is based on the TCP/IP protocol, so any language can implement it without great difficulties.  Right now there are no implementation of this protocol in other languages, but a Javascript implementation over websockets is planned.",
            "title": "Network"
        },
        {
            "location": "/network/subble-socket/1.0.0/",
            "text": "SubbleSocket\n\n\n\n\nVersion 1.0.0\n\n\n\n\nOverview\n\n\nThe SubbleSocket protocol enables a two-way communication between a ISubbleHost instance and a third party client.\nThe security model is out of scope of this document, being that the implementor responsibility.\nThis protocol aims at allowing external applications to consume and produce events in a Subble instance.\n\n\nApart of the initial handshake, when a client do a request it is not guarantee that the next message from the server will be related. If the clients wants to track the request it should append data, that data will also be append by server in the related request\n\n\nThe protocol can be divided in two parts:\n    - Handshake: the clients connects and send list of required events\n    - Event Consume/Produce: the client listens for events and / or produce events\n\n\nEncoding\n\n\nEvery text used in this format must be in UTF-8\n\n\nCase sensitive\n\n\nEvery text is case sensitive except when explicitly said in this document.\n\n\nSerialization\n\n\nthe server must support \nMessagePack\n and should also support \nJSON\n. The implementor is free to support custom serializers, but must not use the values between 0 (zero) and 50 (fifty) because they are reserved for future requirements. the current serializers map is as follow:\n\n\n\n\n0: MessagePack\n\n\n1: JSON\n\n\n2 - 50: Reserved\n\n\n51-255: Implementor defined\n\n\n\n\nfor the purpose of readability this document will the JSON format in examples.\n\n\nHandshake\n\n\nWhen a Clients connects it must send the handshake initial request, the server will not continue with any communication until the initial handshake is completed. A appropriate response is trigger by the server\n\n\nHandshake Request\n\n\nThe initial client request is composed by:\n\n\n1 byte : Request code, 1\n1 byte : Protocol Major Version\n1 byte : Protocol Minor Version\n1 byte : Protocol Patch Version\n\n4 + N byte : Client ID\n1 + N byte : Value separator\n4 + N byte : Subscribe list\n4 + N byte : Produce list\nN byte : Request data\n\n\n\nRequest code\n\nThe request code, to start the handshake the request is always 1\n\n\nProtocol Major, Minor and Patch Version\n\n\nThe first three bytes are the version used by the client, if the server don't support the specified version a error response is trigger,\nsee \nHandshake Response\n for more details.\n\n\nClient ID\n\n\nA id that identify the client, see \nClient ID section\n for details\n\n\nValue separator\n\n\nDefines the value that separates the subscribe and produce list.\nThe length is 1 + n bytes, being the first byte the value that set the length of N\n\n\nSubscribe list\n\n\nIf the client want to receive events of a certain type it must pass the names to subscribe.\nThe names should be in UTF-8 format and be separated by the value defined in 'Value separator'.\n\n\nProduce list\n\n\nIf the client want to generate new events it must pass the event type name.\nThe names should be in UTF-8 format and be separated by the value defined in 'Value separator'.\n\n\nRequest data\n\n\nCustom message that the client can append to the request\n\n\nHandshake Response\n\n\nAfter the client sends the Handshake request the server responds, the first byte is a \nResponse code\n, and the next four bytes are the length of UTF-8 message. The response message is only present when required.\nWe can visualize the response as:\n\n\n1 byte: Response code, ()\n4 + N bytes: Response message\nN bytes: Request data\n\n\n\nEvents\n\n\nEvery time a event occurs, that the client has subscribe during handshake, a new request is made by the server\nthe request will have the following format\n\n\n1 byte: Event request code\n1 byte: Serialization format\n8 byte: Date time\n4 + N byte: Event type name\n4 + N byte: Event GUID\n4 + N byte: Source name\n4 + N byte: Payload\nN byte: Request data\n\n\n\nEvent request code\n\n\nthe event status, see \nRequest codes\n for details.\n\n\nSerialization format\n\n\nThe serialization format used on payload, see \nSerialization\n.\n\n\nDate time\n\n\nThe date and time that the event occur, it is in unix EPOCH time format.\n\n\nEvent type name\n\nThe name that classifies the event\n\n\nEvent GUID\n\nEvent unique ID generated by the server\n\n\nSource name\n\nThe name of the plugin/client that generate the event\n\n\nPayload\n\nevent data\n\n\nRequest data\n\nIf the event was created by this client and it contains \n\n\nProduce events\n\n\nThe client is able to produce events, at every request to create an event the server responds with the event data\n\n\nTo create an event the client must do a request with the following structure:\n\n\n1 byte: request code, 27\n4 + N byte: Client ID\n1 byte: Serialization format\n4 + N byte: Event type name\n4 + N byte: Payload\nN byte: Request Data\n\n\n\nRequest code\n\n\nThe code of the request, 27 to create event, see \nRequest codes\n for more details\n\n\nClient ID\n\n\nThe client ID, see \nClient ID section\n for details\n\n\nSerialization format\n\n\nThe serialization format used on payload, see \nSerialization\n.\n\n\nEvent type name\n\nThe name that classifies the event\n\n\nPayload\n\nEvent payload\n\n\nRequest data\n\nData to be return by the server\n\n\nError Handling\n\n\nEvery time the client does a request that generates a error, the server should create a new request to that client with the error details\nRequest details:\n\n\n1 byte: Request Code\n4 + N bytes: Error Message\nN bytes: request data\n\n\n\nClient ID\n\n\nA UTF-8 text that will identify the client, this value should be generated by the server.\nThe length is 4 + n bytes, being the first 4 byte the value that set the length of N\nIf the length is zero, the server may reject the handshake or generate a new ID that will be returned on the response\nIt is not possible to change value after the Handshake.\nThis value should be present in every client requests\n\n\nClient ID Generation\n\nThe server if free to generate new client id as he sees fit as long as no client id is repeat\n\n\nSubble Codes\n\n\nThe code list can be divided in 3 major groups:\n\n\n\n\n0 -> 25 : Handshake codes\n\n\n26 -> 100: Events codes\n\n\n101 -> 255: Other codes\n\n\n\n\nHandshake codes\n\n\n\n\n\n\n1: Request Access:\nThe code sent in the request to start the handshake\n\n\n\n\n\n\n2: \nOK\n: \nThe handshake is completed and the server is ok to receive new request\n\n\n\n\n\n\n3: \nOK\n - New User ID created:\nThe handshake is completed and the server has successfully created a new client ID, check the message for the client ID\n\n\n\n\n\n\n10: \nNOT OK\n - IP not allowed: \nServer is actively denying the client IP, check a possible whitelist or blacklist\n\n\n\n\n\n\n11: \nNOT OK\n - New clients not allowed: \nThe Client ID was not defined and the server has the generation of new client ID disabled\n\n\n\n\n\n\n12: \nNOT OK\n - Invalid client ID:\nThe Client was defined, but the server don't recognize it\n\n\n\n\n\n\n25: \nNOT OK\n - Unknown handshake Error: \nServer refused the connection for unknown reasons, check response message for details\n\n\n\n\n\n\nEvents Codes\n\n\n\n\n\n\n26: \nServer Event\n: \nEvent created in server side, events created by other clients will also have this code\n\n\n\n\n\n\n27: \nClient Event\n: \nEvent created by client\n\n\n\n\n\n\n52: \nUnknown Server Error\n: \nEvent was not created by server\n\n\n\n\n\n\n51: \nEvent not declared\n: \nEvent name was not defined during handshake",
            "title": "SubbleSocket"
        },
        {
            "location": "/network/subble-socket/1.0.0/#subblesocket",
            "text": "Version 1.0.0",
            "title": "SubbleSocket"
        },
        {
            "location": "/network/subble-socket/1.0.0/#overview",
            "text": "The SubbleSocket protocol enables a two-way communication between a ISubbleHost instance and a third party client.\nThe security model is out of scope of this document, being that the implementor responsibility.\nThis protocol aims at allowing external applications to consume and produce events in a Subble instance.  Apart of the initial handshake, when a client do a request it is not guarantee that the next message from the server will be related. If the clients wants to track the request it should append data, that data will also be append by server in the related request  The protocol can be divided in two parts:\n    - Handshake: the clients connects and send list of required events\n    - Event Consume/Produce: the client listens for events and / or produce events  Encoding  Every text used in this format must be in UTF-8  Case sensitive  Every text is case sensitive except when explicitly said in this document.",
            "title": "Overview"
        },
        {
            "location": "/network/subble-socket/1.0.0/#serialization",
            "text": "the server must support  MessagePack  and should also support  JSON . The implementor is free to support custom serializers, but must not use the values between 0 (zero) and 50 (fifty) because they are reserved for future requirements. the current serializers map is as follow:   0: MessagePack  1: JSON  2 - 50: Reserved  51-255: Implementor defined   for the purpose of readability this document will the JSON format in examples.",
            "title": "Serialization"
        },
        {
            "location": "/network/subble-socket/1.0.0/#handshake",
            "text": "When a Clients connects it must send the handshake initial request, the server will not continue with any communication until the initial handshake is completed. A appropriate response is trigger by the server",
            "title": "Handshake"
        },
        {
            "location": "/network/subble-socket/1.0.0/#handshake-request",
            "text": "The initial client request is composed by:  1 byte : Request code, 1\n1 byte : Protocol Major Version\n1 byte : Protocol Minor Version\n1 byte : Protocol Patch Version\n\n4 + N byte : Client ID\n1 + N byte : Value separator\n4 + N byte : Subscribe list\n4 + N byte : Produce list\nN byte : Request data  Request code \nThe request code, to start the handshake the request is always 1  Protocol Major, Minor and Patch Version  The first three bytes are the version used by the client, if the server don't support the specified version a error response is trigger,\nsee  Handshake Response  for more details.  Client ID  A id that identify the client, see  Client ID section  for details  Value separator  Defines the value that separates the subscribe and produce list.\nThe length is 1 + n bytes, being the first byte the value that set the length of N  Subscribe list  If the client want to receive events of a certain type it must pass the names to subscribe.\nThe names should be in UTF-8 format and be separated by the value defined in 'Value separator'.  Produce list  If the client want to generate new events it must pass the event type name.\nThe names should be in UTF-8 format and be separated by the value defined in 'Value separator'.  Request data  Custom message that the client can append to the request",
            "title": "Handshake Request"
        },
        {
            "location": "/network/subble-socket/1.0.0/#handshake-response",
            "text": "After the client sends the Handshake request the server responds, the first byte is a  Response code , and the next four bytes are the length of UTF-8 message. The response message is only present when required.\nWe can visualize the response as:  1 byte: Response code, ()\n4 + N bytes: Response message\nN bytes: Request data",
            "title": "Handshake Response"
        },
        {
            "location": "/network/subble-socket/1.0.0/#events",
            "text": "Every time a event occurs, that the client has subscribe during handshake, a new request is made by the server\nthe request will have the following format  1 byte: Event request code\n1 byte: Serialization format\n8 byte: Date time\n4 + N byte: Event type name\n4 + N byte: Event GUID\n4 + N byte: Source name\n4 + N byte: Payload\nN byte: Request data  Event request code  the event status, see  Request codes  for details.  Serialization format  The serialization format used on payload, see  Serialization .  Date time  The date and time that the event occur, it is in unix EPOCH time format.  Event type name \nThe name that classifies the event  Event GUID \nEvent unique ID generated by the server  Source name \nThe name of the plugin/client that generate the event  Payload \nevent data  Request data \nIf the event was created by this client and it contains",
            "title": "Events"
        },
        {
            "location": "/network/subble-socket/1.0.0/#produce-events",
            "text": "The client is able to produce events, at every request to create an event the server responds with the event data  To create an event the client must do a request with the following structure:  1 byte: request code, 27\n4 + N byte: Client ID\n1 byte: Serialization format\n4 + N byte: Event type name\n4 + N byte: Payload\nN byte: Request Data  Request code  The code of the request, 27 to create event, see  Request codes  for more details  Client ID  The client ID, see  Client ID section  for details  Serialization format  The serialization format used on payload, see  Serialization .  Event type name \nThe name that classifies the event  Payload \nEvent payload  Request data \nData to be return by the server",
            "title": "Produce events"
        },
        {
            "location": "/network/subble-socket/1.0.0/#error-handling",
            "text": "Every time the client does a request that generates a error, the server should create a new request to that client with the error details\nRequest details:  1 byte: Request Code\n4 + N bytes: Error Message\nN bytes: request data",
            "title": "Error Handling"
        },
        {
            "location": "/network/subble-socket/1.0.0/#client-id",
            "text": "A UTF-8 text that will identify the client, this value should be generated by the server.\nThe length is 4 + n bytes, being the first 4 byte the value that set the length of N\nIf the length is zero, the server may reject the handshake or generate a new ID that will be returned on the response\nIt is not possible to change value after the Handshake.\nThis value should be present in every client requests  Client ID Generation \nThe server if free to generate new client id as he sees fit as long as no client id is repeat",
            "title": "Client ID"
        },
        {
            "location": "/network/subble-socket/1.0.0/#subble-codes",
            "text": "The code list can be divided in 3 major groups:   0 -> 25 : Handshake codes  26 -> 100: Events codes  101 -> 255: Other codes",
            "title": "Subble Codes"
        },
        {
            "location": "/network/subble-socket/1.0.0/#handshake-codes",
            "text": "1: Request Access:\nThe code sent in the request to start the handshake    2:  OK : \nThe handshake is completed and the server is ok to receive new request    3:  OK  - New User ID created:\nThe handshake is completed and the server has successfully created a new client ID, check the message for the client ID    10:  NOT OK  - IP not allowed: \nServer is actively denying the client IP, check a possible whitelist or blacklist    11:  NOT OK  - New clients not allowed: \nThe Client ID was not defined and the server has the generation of new client ID disabled    12:  NOT OK  - Invalid client ID:\nThe Client was defined, but the server don't recognize it    25:  NOT OK  - Unknown handshake Error: \nServer refused the connection for unknown reasons, check response message for details",
            "title": "Handshake codes"
        },
        {
            "location": "/network/subble-socket/1.0.0/#events-codes",
            "text": "26:  Server Event : \nEvent created in server side, events created by other clients will also have this code    27:  Client Event : \nEvent created by client    52:  Unknown Server Error : \nEvent was not created by server    51:  Event not declared : \nEvent name was not defined during handshake",
            "title": "Events Codes"
        }
    ]
}